#!/bin/python

import argparse
import os
from os.path import isdir
import json
import sys

parser = argparse.ArgumentParser();
parser.add_argument("-d", "--demo", required = False, default = False)
args = parser.parse_args()

everythingOkay = True

def red(txt):
	return "\033[31m" + txt + "\033[0m"

def green(txt):
	return "\033[32m" + txt + "\033[0m"

def test(result, comment, commentForFail = None):
	global everythingOkay

	if result:
		resultString = green("PASS")
	else:
		if commentForFail != None:
			comment = commentForFail

		resultString = red("FAIL")

		everythingOkay = False
	
	print "[ ", resultString, " ] ", comment

	return result

def testFileExists(filename, filePurpose = "file"):
	if os.path.isfile(filename):
		return test(True, "Found " + filePurpose + ": " + filename)
	else:
		return test(False, "The file '" + filename + "' is required.")

def lintQemuGraphics(demoConfig):
	try:
		test("-nographic" in demoConfig['builders'][0]['qemuargs'],
			"Qemu args has -nographics for serial console.",
			"-nographics should be in the qemu args"
			)
	except:
		test(False, "No Qemu args have been specified, wont be able to monitor the console")

def lintDemoConfig(demoConfig):
	try: 
		test(demoConfig['builders'][0]['type'] == "qemu", 
			"The first builder is a 'qemu' builder", 
			"The first builder was found, but it needs to be of 'qemu' type"
		)
	except: 
		test(False, "No builder was found!")

	try:
		test(demoConfig['builders'][0]['iso_checksum_type'] == "none",
			"The pointless ISO checksum is disabled.",
			"The pointless ISO checksum is enabled, instead set it to 'none'. "
		)
	except:
		test(False, "Could not determine the ISO checksum type.")

	try:
		test(demoConfig['builders'][0]['ssh_wait_timeout'] == "20m",
			"The SSH timeout is reasonable.",
			"The SSH timeout should be '20m'",
		)
	except:
		test(False, "The ssh_wait_timeout is not specified in the Qemu builder")
		

	lintQemuGraphics(demoConfig)

def lintDemoJson(demoDirectory):	
	packerConfigFile = file(os.path.join(demoDirectory, "demo.json"), 'r')

	try:
		demoJson = json.load(packerConfigFile)

		test(True, "Demo JSON is valid.")

		lintDemoConfig(demoJson)
	except Exception as e:
		test(False, "Demo config exists, but could not be loaded, is it valid JSON?")
		print e

	packerConfigFile.close()

def lintDemo(demoDirectory):
	print "Demo:", demoDirectory

	if testFileExists(os.path.join(demoDirectory, "demo.json"), "packer config file"):
		lintDemoJson(demoDirectory)

	print

print "demolint"
print "-" * 3

if args.demo != False:
	lintDemo(args.demo)
else:
	for f in os.listdir(os.getcwd()):
		if isdir(f) and f[0] != ".":
			lintDemo(f)

if not everythingOkay:
	sys.exit(1)
